{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\nconst { spawn } = require('child_process');\nconst path = require('path');\nconst os = require('os');\nconst fs = require('fs');\n\nexport function activate(context: vscode.ExtensionContext) {\n\n    const handler: vscode.ChatRequestHandler = (request: vscode.ChatRequest, chatContext: vscode.ChatContext, stream: vscode.ChatResponseStream, token: vscode.CancellationToken): Thenable<any> => {\n        \n        return new Promise<any>((resolve) => {\n            // Auto-detect mem0 installation\n            let mem0CliPath: string;\n            let projectContext: string;\n            \n            // Try workspace-specific setting first\n            const workspaceConfig = vscode.workspace.getConfiguration('mem0');\n            const configuredRoot = workspaceConfig.get<string>('projectRoot');\n            \n            if (configuredRoot) {\n                mem0CliPath = path.resolve(configuredRoot, 'client/mem0');\n            } else {\n                // Auto-detect: look for mem0 in common locations\n                const possiblePaths = [\n                    path.join(os.homedir(), 'Workspace/mem0/client/mem0'),\n                    path.join(os.homedir(), 'workspace/mem0/client/mem0'),\n                    path.join(os.homedir(), 'Projects/mem0/client/mem0'),\n                    path.join(os.homedir(), 'projects/mem0/client/mem0'),\n                    '/usr/local/bin/mem0',\n                    'mem0' // Try PATH\n                ];\n                \n                mem0CliPath = possiblePaths.find(p => {\n                    try {\n                        fs.accessSync(p);\n                        return true;\n                    } catch {\n                        return false;\n                    }\n                }) || 'mem0';\n            }\n            \n            // Handle context selection and management\n            if (request.prompt.trim().startsWith('context ')) {\n                const contextArgs = request.prompt.trim().split(/\\s+/).slice(1);\n                const contextCommand = contextArgs[0];\n                \n                if (contextCommand === 'start' && contextArgs[1]) {\n                    projectContext = contextArgs[1];\n                    stream.markdown(`\uD83C\uDFAF **Started context:** \\`${projectContext}\\`\\n\\n`);\n                } else if (contextCommand === 'list') {\n                    // List available contexts\n                    const child = spawn(mem0CliPath, ['contexts'], { \n                        cwd: configuredRoot || os.homedir(),\n                        env: { ...require('process').env }\n                    });\n                    \n                    child.stdout.on('data', (data) => {\n                        stream.markdown(data.toString());\n                    });\n                    \n                    child.stderr.on('data', (data) => {\n                        stream.markdown(`**Error:**\\n\\`\\`\\`\\n${data.toString()}\\n\\`\\`\\``);\n                    });\n                    \n                    child.on('close', (code) => {\n                        resolve({ commands: [] });\n                    });\n                    return;\n                } else if (contextCommand === 'switch' && contextArgs[1]) {\n                    projectContext = contextArgs[1];\n                    stream.markdown(`\uD83C\uDFAF **Switched to context:** \\`${projectContext}\\`\\n\\n`);\n                } else {\n                    stream.markdown(`**Usage:**\\n- \\`@mem0 context start <name>\\` - Start new context\\n- \\`@mem0 context switch <name>\\` - Switch to existing context\\n- \\`@mem0 context list\\` - List all contexts\\n\\n`);\n                    return resolve({ commands: [] });\n                }\n            } else {\n                // Auto-detect or use workspace context\n                const workspaceConfig = vscode.workspace.getConfiguration('mem0');\n                const explicitContext = workspaceConfig.get<string>('context');\n                \n                if (explicitContext) {\n                    projectContext = explicitContext;\n                    stream.markdown(`\uD83C\uDFAF **Context:** \\`${projectContext}\\` (from settings)\\n\\n`);\n                } else if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 0) {\n                    const workspaceFolder = vscode.workspace.workspaceFolders[0];\n                    projectContext = path.basename(workspaceFolder.uri.fsPath);\n                    stream.markdown(`\uD83C\uDFAF **Context:** \\`${projectContext}\\` (auto-detected from workspace)\\n\\n`);\n                } else {\n                    projectContext = 'vscode-session';\n                    stream.markdown(`\uD83C\uDFAF **Context:** \\`${projectContext}\\` (default session)\\n\\n`);\n                }\n            }\n\n            if (request.prompt.trim() === 'observe') {\n                stream.markdown(\"Observing chat history...\\n\\n\");\n                for (const turn of chatContext.history) {\n                    if (turn instanceof vscode.ChatResponseTurn) {\n                        stream.markdown(`- Found a response from **@${turn.participant}**\\n`);\n                    }\n                }\n                return resolve({ commands: [] });\n            }\n\n            const [command, ...rest] = request.prompt.trim().split(/\\s+/);\n            let args: string[];\n\n            if (command === 'remember') {\n                args = [rest.join(' ')];\n            } else if (command === 'recall') {\n                args = []; // Recall takes no arguments\n            } else {\n                args = rest;\n            }\n\n            const child = spawn(mem0CliPath, [command, ...args], { \n                cwd: configuredRoot || os.homedir(),\n                env: { ...require('process').env, MEM0_CONTEXT: projectContext }\n            });\n\n            child.stdout.on('data', (data) => {\n                stream.markdown(data.toString());\n            });\n\n            child.stderr.on('data', (data) => {\n                stream.markdown(`**Error:**\\n\\`\\`\\`\\n${data.toString()}\\n\\`\\`\\``);\n            });\n\n            child.on('close', (code) => {\n                resolve({ commands: [] });\n            });\n        });\n    };\n\n    const agent = vscode.chat.createChatParticipant('mem0', handler);\n    agent.iconPath = new vscode.ThemeIcon('beaker');\n}\n\nexport function deactivate() {}\n\n"],
  "mappings": "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",
  "names": ["child", "workspaceConfig"]
}
