{
  "version": 3,
  "sources": ["../src/extension.ts"],
  "sourcesContent": ["import * as vscode from 'vscode';\nconst { spawn } = require('child_process');\nconst path = require('path');\nconst os = require('os');\nconst fs = require('fs');\n\n// Global context state\nlet currentContext: string = '';\n\nexport function activate(context: vscode.ExtensionContext) {\n    console.log('mem0 extension activating...');\n    vscode.window.showInformationMessage('mem0 extension is activating!');\n\n    const handler: vscode.ChatRequestHandler = (request: vscode.ChatRequest, chatContext: vscode.ChatContext, stream: vscode.ChatResponseStream, token: vscode.CancellationToken): Thenable<any> => {\n        \n        return new Promise<any>((resolve) => {\n            stream.markdown(`**Extension activated - processing request: \"${request.prompt}\"**\\n\\n`);\n            // Auto-detect mem0 installation\n            let mem0CliPath: string;\n            let projectContext: string;\n            \n            // Try workspace-specific setting first\n            const initialConfig = vscode.workspace.getConfiguration('mem0');\n            const configuredRoot = initialConfig.get<string>('projectRoot');\n            \n            if (configuredRoot) {\n                mem0CliPath = path.resolve(configuredRoot, 'client/mem0');\n            } else {\n                // Auto-detect: look for mem0 in common locations\n                const possiblePaths = [\n                    path.join(os.homedir(), 'Workspace/mem0/client/mem0'),\n                    path.join(os.homedir(), 'workspace/mem0/client/mem0'),\n                    path.join(os.homedir(), 'Projects/mem0/client/mem0'),\n                    path.join(os.homedir(), 'projects/mem0/client/mem0'),\n                    '/usr/local/bin/mem0',\n                    'mem0' // Try PATH\n                ];\n                \n                mem0CliPath = possiblePaths.find(p => {\n                    try {\n                        fs.accessSync(p);\n                        return true;\n                    } catch {\n                        return false;\n                    }\n                }) || 'mem0';\n            }\n            \n            // Determine project context first\n            const workspaceConfig = vscode.workspace.getConfiguration('mem0');\n            const explicitContext = workspaceConfig.get<string>('context');\n            \n            if (currentContext) {\n                // Use the globally set context from previous context start command\n                projectContext = currentContext;\n            } else if (explicitContext) {\n                projectContext = explicitContext;\n            } else if (vscode.workspace.workspaceFolders && vscode.workspace.workspaceFolders.length > 0) {\n                const workspaceFolder = vscode.workspace.workspaceFolders[0];\n                projectContext = path.basename(workspaceFolder.uri.fsPath);\n            } else {\n                projectContext = 'vscode-session';\n            }\n            \n            // Handle context selection and management\n            if (request.prompt.trim().startsWith('context ')) {\n                const contextArgs = request.prompt.trim().split(/\\s+/).slice(1);\n                const contextCommand = contextArgs[0];\n                \n                if (contextCommand === 'start' && contextArgs[1]) {\n                    currentContext = contextArgs[1];\n                    projectContext = currentContext;\n                    stream.markdown(`\uD83C\uDFAF **Started context:** \\`${projectContext}\\`\\n\\n`);\n                    \n                    // Start automatic recording by calling CLI context start\n                    const child = spawn(mem0CliPath, ['context', 'start', projectContext], { \n                        cwd: configuredRoot || os.homedir(),\n                        env: { ...require('process').env }\n                    });\n                    \n                    child.on('close', (code) => {\n                        if (code === 0) {\n                            stream.markdown(`\u2705 **Automatic recording started for context:** \\`${projectContext}\\`\\n\\n`);\n                        } else {\n                            stream.markdown(`\u274C **Failed to start recording for context:** \\`${projectContext}\\`\\n\\n`);\n                        }\n                    });\n                } else if (contextCommand === 'list') {\n                    // List available contexts\n                    const child = spawn(mem0CliPath, ['contexts'], { \n                        cwd: configuredRoot || os.homedir(),\n                        env: { ...require('process').env }\n                    });\n                    \n                    child.stdout.on('data', (data) => {\n                        stream.markdown(data.toString());\n                    });\n                    \n                    child.stderr.on('data', (data) => {\n                        stream.markdown(`**Error:**\\n\\`\\`\\`\\n${data.toString()}\\n\\`\\`\\``);\n                    });\n                    \n                    child.on('close', (code) => {\n                        resolve({ commands: [] });\n                    });\n                    return;\n                } else if (contextCommand === 'switch' && contextArgs[1]) {\n                    projectContext = contextArgs[1];\n                    stream.markdown(`\uD83C\uDFAF **Switched to context:** \\`${projectContext}\\`\\n\\n`);\n                } else {\n                    stream.markdown(`**Usage:**\\n- \\`@mem0 context start <name>\\` - Start new context\\n- \\`@mem0 context switch <name>\\` - Switch to existing context\\n- \\`@mem0 context list\\` - List all contexts\\n\\n`);\n                    return resolve({ commands: [] });\n                }\n            }\n            \n            // Show current context\n            stream.markdown(`\uD83C\uDFAF **Context:** \\`${projectContext}\\`\\n\\n`);\n\n            if (request.prompt.trim() === 'observe') {\n                stream.markdown(\"Observing chat history...\\n\\n\");\n                for (const turn of chatContext.history) {\n                    if (turn instanceof vscode.ChatResponseTurn) {\n                        stream.markdown(`- Found a response from **@${turn.participant}**\\n`);\n                    }\n                }\n                return resolve({ commands: [] });\n            }\n\n            const [command, ...rest] = request.prompt.trim().split(/\\s+/);\n            let args: string[];\n\n            if (command === 'remember') {\n                args = ['remember', rest.join(' '), '--context', projectContext];\n            } else if (command === 'recall') {\n                if (rest.length > 0) {\n                    // If user specified a context like \"recall CIP-analysis\", use that\n                    const contextName = rest.join(' ');\n                    args = ['recall', '--context', contextName];\n                } else {\n                    // Default to current project context\n                    args = ['recall', '--context', projectContext];\n                }\n            } else if (command === 'contexts') {\n                args = ['contexts'];\n            } else {\n                args = [command, ...rest];\n            }\n\n            // Debug logging\n            stream.markdown(`**Debug Info:**\\n`);\n            stream.markdown(`- Command: \\`${mem0CliPath} ${args.join(' ')}\\`\\n`);\n            stream.markdown(`- Working Directory: \\`${configuredRoot || os.homedir()}\\`\\n`);\n            stream.markdown(`- Project Context: \\`${projectContext}\\`\\n\\n`);\n            \n            const child = spawn(mem0CliPath, args, { \n                cwd: configuredRoot || os.homedir(),\n                env: { ...require('process').env }\n            });\n\n            let stdout = '';\n            let stderr = '';\n\n            child.stdout.on('data', (data) => {\n                stdout += data.toString();\n            });\n\n            child.stderr.on('data', (data) => {\n                stderr += data.toString();\n            });\n\n            child.on('close', (code) => {\n                stream.markdown(`**Exit Code:** ${code}\\n\\n`);\n                \n                if (stderr) {\n                    stream.markdown(`**Stderr:**\\n\\`\\`\\`\\n${stderr}\\n\\`\\`\\`\\n\\n`);\n                }\n                \n                if (stdout) {\n                    stream.markdown(`**Raw Output:**\\n\\`\\`\\`json\\n${stdout}\\n\\`\\`\\`\\n\\n`);\n                    \n                    // Try to parse and format the output\n                    try {\n                        const lines = stdout.trim().split('\\n').filter(line => line.trim() && !line.includes('NotOpenSSLWarning'));\n                        const memories = lines.map(line => JSON.parse(line));\n                        \n                        stream.markdown(`**Found ${memories.length} memories:**\\n\\n`);\n                        \n                        memories.forEach((memory, index) => {\n                            stream.markdown(`${index + 1}. **${memory.type}** (${memory.context || 'no context'})\\n`);\n                            if (memory.data && memory.data.text) {\n                                stream.markdown(`   ${memory.data.text}\\n`);\n                            }\n                            stream.markdown(`   *Created: ${memory.created_at}*\\n\\n`);\n                        });\n                    } catch (e) {\n                        stream.markdown(`**Formatted Output:**\\n${stdout}\\n\\n`);\n                    }\n                } else {\n                    stream.markdown(`**No output received**\\n\\n`);\n                }\n                \n                resolve({ commands: [] });\n            });\n        });\n    };\n\n    const agent = vscode.chat.createChatParticipant('mem0', handler);\n    agent.iconPath = new vscode.ThemeIcon('beaker');\n    \n    context.subscriptions.push(agent);\n    console.log('mem0 extension activated successfully');\n    vscode.window.showInformationMessage('mem0 extension activated successfully!');\n}\n\nexport function deactivate() {}\n\n"],
  "mappings": "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",
  "names": ["child"]
}
