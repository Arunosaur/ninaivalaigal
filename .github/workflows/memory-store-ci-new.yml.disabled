name: memory-store-ci
on:
  push:
    paths:
      - 'server/**'
      - 'alembic/**'
      - 'docker-compose.ci.yml'
      - '.github/workflows/memory-store-ci.yml'
      - 'tests/**'
      - 'scripts/**'
  pull_request:
  schedule:
    - cron: '15 3 * * *'
jobs:
  test-memory-store:
    runs-on: [self-hosted, macstudio]  # Use Mac Studio runner
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix: { python-version: ['3.10','3.11','3.12'] }
    env:
      DATABASE_URL: postgresql://medhasys:${{ secrets.POSTGRES_PASSWORD }}@localhost:5433/medhasys_test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt
            pyproject.toml
            setup.cfg
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black
          pip install "psycopg[binary]" sqlalchemy alembic pytest fastapi "uvicorn[standard]" httpx
      - name: Lint
        run: |
          flake8 server || (echo "::warning::flake8 fails"; exit 1)
          black --check server || (echo "::warning::black check fails"; exit 1)
      - name: Start test database
        run: |
          docker run -d --name postgres-test-${{ matrix.python-version }} \
            -e POSTGRES_USER=medhasys \
            -e POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            -e POSTGRES_DB=medhasys_test \
            -p ${{ 5433 + strategy.job-index }}:5432 \
            pgvector/pgvector:pg16

          # Wait for database to be ready
          timeout 60 bash -c 'until pg_isready -h localhost -p ${{ 5433 + strategy.job-index }} -U medhasys; do sleep 2; done'
      - name: Compute snapshot key
        id: snapkey
        run: |
          python scripts/db_snapshot_key.py > snapshot_key.txt || echo no-migrations > snapshot_key.txt
          echo "key=$(cat snapshot_key.txt)" >> $GITHUB_OUTPUT
      - name: Restore dump
        id: cache-restore
        uses: actions/cache/restore@v4
        with:
          path: memory_dump.sql
          key: db-snapshot-${{ steps.snapkey.outputs.key }}
      - name: Setup database schema
        run: |
          # Update DATABASE_URL for this specific test instance
          export DATABASE_URL="postgresql://medhasys:${{ secrets.POSTGRES_PASSWORD }}@localhost:${{ 5433 + strategy.job-index }}/medhasys_test"

          # Apply migrations
          if [ -f alembic.ini ]; then
            alembic upgrade head
          elif [ -f server/memory/db/migrations/0111_memory_pgvector.sql ]; then
            psql "$DATABASE_URL" -f server/memory/db/migrations/0111_memory_pgvector.sql
          fi
      - name: Save dump
        if: steps.cache-restore.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: memory_dump.sql
          key: db-snapshot-${{ steps.snapkey.outputs.key }}
      - name: Tests
        run: |
          # Set DATABASE_URL for tests
          export DATABASE_URL="postgresql://medhasys:${{ secrets.POSTGRES_PASSWORD }}@localhost:${{ 5433 + strategy.job-index }}/medhasys_test"
          export PYTHONPATH="$PWD/server:$PYTHONPATH"

          # Run core tests
          pytest -q tests/test_factory_switch_smoke.py
          pytest -q tests/test_security_basic.py
          pytest -q tests/test_auto_recording.py

          # Run memory substrate tests if available
          if [ -f server/memory/tests/test_postgres_semantic_demo.py ]; then
            pytest -q server/memory/tests/test_postgres_semantic_demo.py
          fi
      - name: Cleanup
        if: always()
        run: |
          docker rm -f postgres-test-${{ matrix.python-version }} || true
      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: ci-artifacts-${{ matrix.python-version }}
          path: |
            .pytest_cache
            **/pytest*.xml
            memory_dump.sql
          if-no-files-found: ignore
