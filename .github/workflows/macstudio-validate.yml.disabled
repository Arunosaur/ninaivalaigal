name: Mac Studio Apple Container CLI Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'scripts/**'
      - '**.sh'
      - 'server/**'
      - 'tests/**'
      - '.github/workflows/macstudio-validate.yml'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  validate:
    runs-on: [self-hosted, macstudio]
    timeout-minutes: 45

    concurrency:
      group: macstudio-validate-${{ github.ref }}
      cancel-in-progress: true

    env:
      # --- Ports (match your scripts + .env.example) ---
      POSTGRES_PORT: "5433"
      PGBOUNCER_PORT: "6432"
      API_PORT: "13370"

      # --- DB credentials (user/db are public, password via secret) ---
      POSTGRES_USER: "nina"
      POSTGRES_DB: "nina"
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      # --- API / App env ---
      NINAIVALAIGAL_JWT_SECRET: ${{ secrets.NINAIVALAIGAL_JWT_SECRET }}
      API_RELOAD: "false"   # CI should run non-reload

      # --- Memory provider toggles (set for your current choice) ---
      MEMORY_PROVIDER: "http"                          # http (mem0 sidecar) | native
      MEMORY_HTTP_BASE: "http://127.0.0.1:7070"        # adjust if you expose mem0 sidecar

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure Apple Container CLI on PATH
        run: |
          if [ -x /opt/homebrew/bin/container ] && [ ! -x /usr/local/bin/container ]; then
            sudo ln -sf /opt/homebrew/bin/container /usr/local/bin/container
          fi
          which container && container --version

      - name: Setup Python for pre-commit
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Host info (sanity)
        run: |
          sw_vers || true
          uname -a
          container --version || true

      - name: Detect host IP for containers (LAN/Tailscale)
        shell: bash
        run: |
          # Prefer en0; fall back to loopback if missing
          HOST_IP="$(ipconfig getifaddr en0 2>/dev/null || echo 127.0.0.1)"
          echo "HOST_IP=${HOST_IP}" >> $GITHUB_ENV
          echo "POSTGRES_HOST=127.0.0.1" >> $GITHUB_ENV
          echo "Detected POSTGRES_HOST=${HOST_IP}"

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install Python deps (best-effort)
        shell: bash
        run: |
          python -m pip install -U pip
          if ls requirements*.txt >/dev/null 2>&1; then
            pip install -r requirements.txt || true
            if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi
          fi

      - name: Pre-flight validation (optional)
        shell: bash
        run: |
          # quick shellcheck if available
          if command -v shellcheck >/dev/null 2>&1; then
            shellcheck scripts/*.sh || true
          fi

      # --- Bring up the stack on the Mac Studio host ---
      - name: Start stack (DB → PgBouncer → API)
        shell: bash
        run: make stack-up

      - name: Stack status (after start)
        shell: bash
        run: make stack-status

      # --- Your existing validations ---
      - name: Run system validation
        shell: bash
        run: |
          if [ -x ./validate_system.sh ]; then ./validate_system.sh; else echo "validate_system.sh not found"; fi

      - name: Run production readiness checks
        shell: bash
        run: |
          if [ -x ./validate_production_readiness.sh ]; then ./validate_production_readiness.sh; else echo "validate_production_readiness.sh not found"; fi

      - name: Run CLI happy path
        shell: bash
        run: |
          if [ -x ./validate_cli_flow.sh ]; then ./validate_cli_flow.sh; else echo "validate_cli_flow.sh not found"; fi

      # --- Optional: run tests if present ---
      - name: Run tests (pytest)
        shell: bash
        run: |
          if command -v pytest >/dev/null 2>&1 && [ -d tests ]; then
            pytest -q || (echo "pytest failed"; exit 1)
          else
            echo "pytest or tests/ not present; skipping."
          fi

      # --- Always collect logs + status, even on failure ---
      - name: Collect logs & status (always)
        if: always()
        shell: bash
        run: |
          mkdir -p artifacts
          make stack-status || true
          container logs nv-db > artifacts/db.log 2>&1 || true
          container logs nv-pgbouncer > artifacts/pgbouncer.log 2>&1 || true
          container logs nv-api > artifacts/api.log 2>&1 || true
          # mem0 sidecar (if you add it as nv-mem0)
          container logs nv-mem0 > artifacts/mem0.log 2>&1 || true

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macstudio-stack-logs
          path: artifacts/

      - name: Stop stack (always)
        if: always()
        shell: bash
        run: make stack-down
