---
name: Mac Studio â€“ Validate Stack

on:
  push:
    branches: [main]
  workflow_dispatch: {}

permissions:
  contents: read
  packages: read

concurrency:
  group: studio-validate-${{ github.ref }}
  cancel-in-progress: true

jobs:
  validate:
    runs-on: [self-hosted, macstudio]
    timeout-minutes: 30

    env:
      PG_PORT: "5433"
      PGBOUNCER_PORT: "6432"
      PG_USER: "postgres"
      PG_PASSWORD: "test123"
      PG_DB: "testdb"
      NV_PGBOUNCER_IMAGE: "nina-pgbouncer:arm64"   # local, no pull
      NV_API_IMAGE: "nina-api:arm64"  # local image, no pull

    steps:
      - name: Checkout (with submodules)
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0

      - name: Ensure Apple Container CLI on PATH
        run: |
          echo "$HOME/.local/bin" >> "$GITHUB_PATH"  # wherever the 'container' binary lives on the runner
          command -v container

      - name: Show environment
        run: |
          set -euxo pipefail
          which container || true
          container --version || true
          echo "Workspace: $GITHUB_WORKSPACE"
          sysctl -n machdep.cpu.brand_string || true

      - name: Prepare runner directories (PgBouncer + logs)
        run: |
          set -euxo pipefail
          mkdir -p "$GITHUB_WORKSPACE/.runner/pgbouncer"
          mkdir -p "$GITHUB_WORKSPACE/.runner/logs"

      - name: Build required images
        run: |
          # Build the custom images our scripts expect
          container build -t nina-pgbouncer:arm64 -f containers/pgbouncer/Dockerfile containers/pgbouncer
          container build -t nina-api:arm64 -f containers/api/Dockerfile .

      - name: Use validated stack scripts
        timeout-minutes: 5
        run: |
          set -euxo pipefail

          # Set environment variables for our proven scripts
          export POSTGRES_PASSWORD="${PG_PASSWORD}"
          export POSTGRES_DB="${PG_DB}"
          export POSTGRES_USER="${PG_USER}"
          export POSTGRES_PORT="${PG_PORT}"
          export PGBOUNCER_PORT="${PGBOUNCER_PORT}"
          export NINAIVALAIGAL_JWT_SECRET="test-secret-for-ci-validation-only"

          # Use our validated, production-ready scripts
          chmod +x scripts/nv-*.sh

          echo "=== Starting Database ==="
          timeout 60 ./scripts/nv-db-start.sh || { echo "DB start timed out"; exit 1; }

          echo "=== Starting PgBouncer ==="
          timeout 60 ./scripts/nv-pgbouncer-start.sh || { echo "PgBouncer start timed out"; exit 1; }

          echo "=== Starting API ==="
          timeout 60 ./scripts/nv-api-start.sh || { echo "API start timed out"; exit 1; }

          echo "=== Validating Stack ==="
          timeout 30 ./scripts/nv-stack-status.sh || { echo "Stack status timed out"; exit 1; }

          echo "=== SUCCESS: All components started! ==="

      - name: Collect logs (always)
        if: always()
        run: |
          set -euxo pipefail
          echo "::group::ps"
          container ps -a || true
          echo "::endgroup::"

          for c in nv-api nv-pgbouncer nv-db; do
            echo "::group::logs $c"
            container logs "$c" || true
            echo "::endgroup::"
          done

      - name: Teardown (always)
        if: always()
        run: |
          # Use our proven teardown script
          chmod +x scripts/nv-stack-stop.sh
          ./scripts/nv-stack-stop.sh || true
