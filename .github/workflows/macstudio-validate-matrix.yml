name: Mac Studio Validation (Matrix: native vs http)

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'scripts/**'
      - '**.sh'
      - 'server/**'
      - 'tests/**'
      - '.github/workflows/macstudio-validate-matrix.yml'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch: {}

permissions:
  contents: read

jobs:
  validate:
    # Single Mac Studio host -> keep as self-hosted
    runs-on: [self-hosted, macstudio]
    timeout-minutes: 60

    # Matrix runs will queue on the same host due to concurrency below
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: native-provider
            provider: native
            memory_http_base: ""
          - name: http-provider
            provider: http
            memory_http_base: "http://127.0.0.1:7070"   # adjust if different

    concurrency:
      # serialize runs on the single Mac Studio box; each matrix job will wait its turn
      group: macstudio-validate-matrix
      cancel-in-progress: true

    env:
      # --- Ports (match your scripts + .env.example) ---
      POSTGRES_PORT: "5433"
      PGBOUNCER_PORT: "6432"
      API_PORT: "13370"

      # --- DB credentials (user/db are public, password via secret) ---
      POSTGRES_USER: "nina"
      POSTGRES_DB: "nina"
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

      # --- API / App env ---
      NINAIVALAIGAL_JWT_SECRET: ${{ secrets.NINAIVALAIGAL_JWT_SECRET }}
      API_RELOAD: "false"

      # --- Provider from the matrix ---
      MEMORY_PROVIDER: ${{ matrix.provider }}
      MEMORY_HTTP_BASE: ${{ matrix.memory_http_base }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Host info
        run: |
          echo "Matrix case: provider=${{ matrix.provider }}"
          sw_vers || true
          uname -a
          container --version || true

      - name: Detect host IP for containers (LAN/Tailscale)
        shell: bash
        run: |
          HOST_IP="$(ipconfig getifaddr en0 2>/dev/null || echo 127.0.0.1)"
          echo "POSTGRES_HOST=${HOST_IP}" >> "$GITHUB_ENV"
          echo "Detected POSTGRES_HOST=${HOST_IP}"

      - name: Setup Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install Python deps (best-effort)
        shell: bash
        run: |
          python -m pip install -U pip
          if ls requirements*.txt >/dev/null 2>&1; then
            pip install -r requirements.txt || true
            if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt || true; fi
          fi

      - name: Pre-flight script lint (optional)
        shell: bash
        run: |
          if command -v shellcheck >/dev/null 2>&1; then
            shellcheck scripts/*.sh || true
          fi

      # ---------- Start services ----------
      - name: Start DB + PgBouncer
        shell: bash
        run: |
          # Bring up DB and PgBouncer (skip API here so we can start mem0 first in http case)
          ./scripts/nv-db-start.sh
          ./scripts/nv-pgbouncer-start.sh

      - name: Start mem0 sidecar (only for http)
        if: matrix.provider == 'http'
        shell: bash
        run: |
          # If you have dedicated scripts, call them; else, no-op gracefully
          if [ -x ./scripts/nv-mem0-start.sh ]; then
            ./scripts/nv-mem0-start.sh
          else
            echo "nv-mem0-start.sh not found; ensure mem0 is running at $MEMORY_HTTP_BASE"
          fi

      - name: Start API
        shell: bash
        env:
          # pass through provider envs to API start script as needed
          MEMORY_PROVIDER: ${{ matrix.provider }}
          MEMORY_HTTP_BASE: ${{ matrix.memory_http_base }}
        run: |
          ./scripts/nv-api-start.sh
          ./scripts/nv-stack-status.sh

      # ---------- Validations ----------
      - name: Run system validation
        shell: bash
        run: |
          if [ -x ./validate_system.sh ]; then ./validate_system.sh; else echo "validate_system.sh not found"; fi

      - name: Run production readiness checks
        shell: bash
        run: |
          if [ -x ./validate_production_readiness.sh ]; then ./validate_production_readiness.sh; else echo "validate_production_readiness.sh not found"; fi

      - name: Run CLI happy path
        shell: bash
        run: |
          if [ -x ./validate_cli_flow.sh ]; then ./validate_cli_flow.sh; else echo "validate_cli_flow.sh not found"; fi

      - name: Pytests (if present)
        shell: bash
        run: |
          if command -v pytest >/dev/null 2>&1 && [ -d tests ]; then
            pytest -q || (echo "pytest failed"; exit 1)
          else
            echo "pytest or tests/ not present; skipping."
          fi

      # ---------- Artifacts & Cleanup ----------
      - name: Collect logs & status (always)
        if: always()
        shell: bash
        run: |
          mkdir -p artifacts
          ./scripts/nv-stack-status.sh || true
          container logs nv-db > artifacts/db.log 2>&1 || true
          container logs nv-pgbouncer > artifacts/pgbouncer.log 2>&1 || true
          container logs nv-api > artifacts/api.log 2>&1 || true
          container logs nv-mem0 > artifacts/mem0.log 2>&1 || true
          # Tag logs with provider to avoid overwrite
          for f in artifacts/*.log; do mv "$f" "${f%.log}-${{ matrix.provider }}.log" 2>/dev/null || true; done

      - name: Upload artifacts (always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: macstudio-logs-${{ matrix.provider }}
          path: artifacts/

      - name: Stop stack (always)
        if: always()
        shell: bash
        run: |
          # Stop API
          ./scripts/nv-api-stop.sh || true
          # Stop mem0 only for http case
          if [ "${{ matrix.provider }}" = "http" ]; then
            if [ -x ./scripts/nv-mem0-stop.sh ]; then ./scripts/nv-mem0-stop.sh || true; fi
          fi
          # Stop PgBouncer & DB
          ./scripts/nv-pgbouncer-stop.sh || true
          ./scripts/nv-db-stop.sh || true
