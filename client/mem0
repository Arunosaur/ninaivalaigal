#!/usr/bin/env python3

import sys
import os

# Add the vendor directory to the path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'vendor'))
import argparse
import requests
import json
import subprocess

API_PORT = os.getenv("MEM0_PORT", 13370)
API_URL = f"http://127.0.0.1:{API_PORT}"

def get_active_context():
    try:
        branch = subprocess.check_output(["git", "rev-parse", "--abbrev-ref", "HEAD"]).strip().decode()
        return branch
    except (subprocess.CalledProcessError, FileNotFoundError):
        return os.path.basename(os.getcwd())

def remember(args):
    context = args.context if args.context else get_active_context()
    try:
        # The server expects the payload to be a nested object
        payload_data = json.loads(args.json_payload)
        if not all(k in payload_data for k in ['type', 'source', 'data']):
            raise ValueError("Payload must contain 'type', 'source', and 'data' keys.")
    except (json.JSONDecodeError, ValueError) as e:
        print(f"Error: Invalid JSON provided for payload. {e}")
        return

    payload = {
        "context": context,
        "payload": payload_data
    }
    response = requests.post(f"{API_URL}/memory", json=payload)
    print(response.json().get("message", ""))

def recall(args):
    context = args.context if args.context else get_active_context()
    response = requests.get(f"{API_URL}/memory", params={"context": context})
    for entry in response.json():
        print(json.dumps(entry, indent=4))

def context_start(args):
    response = requests.post(f"{API_URL}/context/start", params={"context": args.name})
    print(response.json()["message"])

def context_stop(args):
    response = requests.post(f"{API_URL}/context/stop")
    print(response.json()["message"])

def export_memories(args):
    context = args.context if args.context else get_active_context()
    response = requests.get(f"{API_URL}/memory", params={"context": context})
    memories = response.json()

    with open(args.filename, "w") as f:
        f.write(f"# Memory Export: Context '{context}'\n\n")
        for memory in memories:
            f.write(f"## Memory Entry\n\n")
            f.write(f"**Source:** `{memory['source']}`\n")
            f.write(f"**Type:** `{memory['type']}`\n\n")
            f.write("```json\n")
            f.write(json.dumps(memory['data'], indent=4))
            f.write("\n```\n\n---\n\n")
    print(f"Successfully exported memories to {args.filename}")

def main():
    parser = argparse.ArgumentParser(description="A CLI tool to interact with the mem0 server.")
    subparsers = parser.add_subparsers(dest="command", required=True)

    # Remember command
    parser_remember = subparsers.add_parser("remember", help="Store a memory.")
    parser_remember.add_argument("json_payload", help="The structured memory to store, as a JSON string.")
    parser_remember.add_argument("--context", help="The context to store the memory in. Defaults to the current git branch or directory name.")
    parser_remember.set_defaults(func=remember)

    # Recall command
    parser_recall = subparsers.add_parser("recall", help="Recall memories.")
    parser_recall.add_argument("--context", help="The context to recall memories from. Defaults to the current git branch or directory name.")
    parser_recall.set_defaults(func=recall)

    # Context command
    parser_context = subparsers.add_parser("context", help="Manage recording sessions.")
    context_subparsers = parser_context.add_subparsers(dest="subcommand", required=True)
    parser_context_start = context_subparsers.add_parser("start", help="Start recording to a new context.")
    parser_context_start.add_argument("name", help="The name of the context to start recording to.")
    parser_context_start.set_defaults(func=context_start)
    parser_context_stop = context_subparsers.add_parser("stop", help="Stop the current recording session.")
    parser_context_stop.set_defaults(func=context_stop)

    # Export command
    parser_export = subparsers.add_parser("export", help="Export memories to a file.")
    parser_export.add_argument("filename", help="The name of the file to export to.")
    parser_export.add_argument("--context", help="The context to export memories from. Defaults to the current git branch or directory name.")
    parser_export.set_defaults(func=export_memories)

    args = parser.parse_args()
    args.func(args)

if __name__ == "__main__":
    main()

